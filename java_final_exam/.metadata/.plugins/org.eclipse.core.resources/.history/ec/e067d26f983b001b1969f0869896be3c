package final_exam;

public class Room {
	boolean left, right, up, down;
	public Room(boolean left,boolean right,boolean up,boolean down) {
		this.left = left;
		this.right = right;
		this.up = up;
		this.down = down;
	}
	
	void createMap3()
	{
	   map1 = new room * [8];
	   for (int i = 0; i < 8; i++)
	      map1[i] = new room[9];

	   map1[0][0].room2(0, 0, 0, 0);
	   map1[0][1].room2(1, 0, 0, 1);
	   map1[0][2].room2(0, 1, 0, 1);
	   map1[0][3].room2(1, 1, 0, 1);
	   map1[0][4].room2(1, 1, 0, 1);
	   map1[0][5].room2(1, 1, 0, 1);
	   map1[0][6].room2(1, 1, 0, 0);
	   map1[0][7].room2(1, 1, 0, 1);
	   map1[0][8].room2(1, 0, 0, 0);

	   map1[1][0].room2(0, 0, 0, 0);
	   map1[1][1].room2(0, 1, 1, 1);
	   map1[1][2].room2(1, 1, 1, 1);
	   map1[1][3].room2(1, 1, 1, 1);
	   map1[1][4].room2(1, 1, 1, 1);
	   map1[1][5].room2(1, 1, 1, 1);
	   map1[1][6].room2(1, 1, 0, 1);
	   map1[1][7].room2(1, 0, 1, 1);
	   map1[1][8].room2(0, 0, 0, 1);

	   map1[2][0].room2(0, 0, 0, 0);
	   map1[2][1].room2(0, 1, 1, 1);
	   map1[2][2].room2(1, 1, 1, 1);
	   map1[2][3].room2(1, 1, 1, 1);
	   map1[2][4].room2(1, 1, 1, 1);
	   map1[2][5].room2(1, 0, 1, 1);
	   map1[2][6].room2(0, 1, 1, 1);
	   map1[2][7].room2(1, 1, 1, 1);
	   map1[2][8].room2(1, 0, 1, 1);

	   map1[3][0].room2(0, 0, 0, 0);
	   map1[3][1].room2(0, 1, 1, 1);
	   map1[3][2].room2(1, 1, 1, 0);
	   map1[3][3].room2(1, 1, 1, 1);
	   map1[3][4].room2(1, 0, 1, 1);
	   map1[3][5].room2(0, 1, 1, 1);
	   map1[3][6].room2(1, 1, 1, 0);
	   map1[3][7].room2(1, 1, 1, 1);
	   map1[3][8].room2(1, 0, 1, 1);

	   map1[4][0].room2(0, 0, 0, 0);
	   map1[4][1].room2(0, 1, 1, 1);
	   map1[4][2].room2(1, 1, 0, 1);
	   map1[4][3].room2(1, 0, 1, 1);
	   map1[4][4].room2(0, 1, 1, 1);
	   map1[4][5].room2(1, 1, 1, 1);
	   map1[4][6].room2(1, 1, 0, 1);
	   map1[4][7].room2(1, 1, 1, 1);
	   map1[4][8].room2(1, 0, 1, 1);

	   map1[5][0].room2(0, 0, 0, 0);
	   map1[5][1].room2(0, 0, 1, 0);
	   map1[5][2].room2(0, 0, 1, 1);
	   map1[5][3].room2(0, 1, 1, 1);
	   map1[5][4].room2(1, 1, 1, 1);
	   map1[5][5].room2(1, 1, 1, 1);
	   map1[5][6].room2(1, 0, 1, 1);
	   map1[5][7].room2(0, 1, 1, 0);
	   map1[5][8].room2(1, 0, 1, 1);

	   map1[6][0].room2(0, 0, 1, 1);
	   map1[6][1].room2(0, 1, 0, 0);
	   map1[6][2].room2(1, 0, 1, 1);
	   map1[6][3].room2(0, 1, 1, 1);
	   map1[6][4].room2(1, 0, 1, 1);
	   map1[6][5].room2(0, 1, 1, 0);
	   map1[6][6].room2(1, 1, 1, 1);
	   map1[6][7].room2(1, 1, 0, 1);
	   map1[6][8].room2(1, 0, 1, 1);

	   map1[7][0].room2(0, 0, 0, 0);
	   map1[7][1].room2(0, 1, 0, 0);
	   map1[7][2].room2(1, 1, 1, 0);
	   map1[7][3].room2(1, 1, 1, 0);
	   map1[7][4].room2(1, 1, 1, 0);
	   map1[7][5].room2(1, 0, 0, 0);
	   map1[7][6].room2(0, 1, 1, 0);
	   map1[7][7].room2(1, 1, 1, 0);
	   map1[7][8].room2(1, 0, 1, 0);
	}
}
