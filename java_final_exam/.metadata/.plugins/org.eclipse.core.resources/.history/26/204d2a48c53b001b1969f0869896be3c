package final_exam;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import java.awt.event.*;

public class Game extends JFrame {
	private JPanel background;
	private Map map;
	private Human thief;
	private Human police;
	
	private List<JPanel> panelList; // 칸 리스트
//	private JPanel thief; // 도둑
	private Room[][] map1; // 도둑, 경찰 동작 유무

	private int thiefX, thiefY;
	private int policeX, policeY;

	public Game() {
		setTitle("8*8 Color Frame");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		Container c = getContentPane();

		map = new Map();
		thief = new Human();
		police = new Human();
		thief.setColor(new Color(255,0,0));
		police.setColor(new Color(0,0,255));
		
		panelList = map.getPanelList();
		thiefX = 1;
		thiefY = 2;
		
		policeX = 0;
		policeY = 1;
		
		panelList.get(thiefX * 9 + thiefY).add(thief);
		panelList.get(policeX * 9 + policeY).add(police);
		
		
		map1 = map.getLevel1();

		map.addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				int x;
				if (e.getKeyCode() == KeyEvent.VK_LEFT) {
					if (map1[thiefX][thiefY].getLeft() == 0) {
						System.out.println("왼쪽");
						panelList.get(thiefX * 9 + thiefY).remove(thief);

						panelList.get(thiefX * 9 + thiefY).repaint();

						thiefY -= 1;
						panelList.get(thiefX * 9 + thiefY).add(thief);
					}
				} else if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
					if (map1[thiefX][thiefY].getRight() == 0) {
						System.out.println("오른쪽");
						panelList.get(thiefX * 9 + thiefY).remove(thief);

						panelList.get(thiefX * 9 + thiefY).repaint();

						thiefY += 1;
						panelList.get(thiefX * 9 + thiefY).add(thief);
					}
				} else if(e.getKeyCode() == KeyEvent.VK_UP) {
					if (map1[thiefX][thiefY].getUp() == 0) {
						System.out.println("위");
						panelList.get(thiefX * 9 + thiefY).remove(thief);

						panelList.get(thiefX * 9 + thiefY).repaint();

						thiefX -= 1;
						panelList.get(thiefX * 9 + thiefY).add(thief);
					}
				} else if(e.getKeyCode() == KeyEvent.VK_DOWN) {
					if (map1[thiefX][thiefY].getDown() == 0) {
						System.out.println("아래");
						panelList.get(thiefX * 9 + thiefY).remove(thief);

						panelList.get(thiefX * 9 + thiefY).repaint();

						thiefX += 1;
						panelList.get(thiefX * 9 + thiefY).add(thief);
					}
				} 
				panelList.get(policeX * 9 + policeY).remove(police);
				movePolice();
				movePolice();
				panelList.get(policeX * 9 + policeY).repaint();
				panelList.get(policeX * 9 + policeY).add(police);
			}
			
		});

		c.add(map, BorderLayout.CENTER);
		setSize(700, 700);
		setResizable(false); // 창 크기 변환X
		setVisible(true);
		map.setFocusable(true);
	}
	
	public void movePolice() {
		System.out.println("와라 오냐?");
		int dis = this.distance();
		int dis2;
		int temp;
		System.out.println(this.distance());
		
		if(map1[policeX][policeY].getLeft() == 0) {
			temp = policeY;
			policeY -= 1;
			dis2 = this.distance();
			if(dis2 > dis) // 안움직일 때
				policeY = temp;
			else // 움직일 때
				return;
		}
		if(map1[policeX][policeY].getRight() == 0) {
			temp = policeY;
			policeY += 1;
			dis2 = this.distance();
			if(dis2 > dis)
				policeY = temp;
			else
				return;
		}
		if(map1[policeX][policeY].getUp() == 0) {
			temp = policeX;
			policeX -= 1;
			dis2 = this.distance();
			if(dis2 > dis)
				policeX = temp;
			else
				return;
		}
		if(map1[policeX][policeY].getDown() == 0) {
			temp = policeX;
			policeX += 1;
			dis2 = this.distance();
			if(dis2 > dis)
				policeX = temp;
			else
				return;
		}
		
	}
	
	public int distance()
	{
		return Math.abs((thiefX - policeX) + (thiefY - policeY));
	}
	public static void main(String[] args) {
		new Game();
	}
}
